generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MediatorProfile {
  id             String   @id
  label          String
  assistant_id   String
  system_prompt  String?
}

model Extension {
  id             String   @id
  kind           String
  name           String
  latest_version String
  created_at     DateTime @default(now())
  products       Product[]
  chats          ChatExtension[]
}

model Product {
  id                String   @id @default(uuid())
  stripe_product_id String
  label             String
  ext_id            String?
  extension         Extension? @relation(fields: [ext_id], references: [id])
}

model ChatTurnState {
  id            String   @id @default(cuid())
  chat_id       String   @unique
  thread_id     String?
  next_user_id  String?  // Keep for backward compatibility
  next_role     String?  // New: role-based turn management
  turn_queue    Json     @default("[]") // Array of roles in turn order
  current_turn_index Int @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  chat          Chat     @relation("ChatTurnState", fields: [chat_id], references: [id])
}

model Event {
  id         String   @id @default(uuid())
  chat_id    String
  type       String
  data       Json
  created_at DateTime @default(now())
  seq        Int      @default(0)
  chat       Chat?    @relation("ChatEvents", fields: [chat_id], references: [id])
}

model ChatParticipant {
  chat_id   String
  user_id   String
  role      String   @default("user")
  chat      Chat     @relation(fields: [chat_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@id([chat_id, user_id])
}

model User {
  id            String           @id @default(uuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  display_name  String?
  dateCreated   DateTime         @default(now())
  accounts      Account[]
  sessions      Session[]
  participants  ChatParticipant[]
  states        ParticipantState[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id              String           @id @default(uuid())
  origin          String           @default("web")
  mediator_style  String           @default("default")
  turn_taking     String           @default("strict")
  status          String           @default("active")
  created_at      DateTime         @default(now())
  events          Event[]          @relation("ChatEvents")
  turn_state      ChatTurnState?   @relation("ChatTurnState")
  participants    ChatParticipant[]
  states          ParticipantState[]
  extensions      ChatExtension[]
}

model ParticipantState {
  chat_id   String
  user_id   String
  feelings  Json     @default("[]")
  needs     Json     @default("[]")
  viewpoints Json    @default("[]")
  chat      Chat     @relation(fields: [chat_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@id([chat_id, user_id])
}

model ChatExtension {
  chat_id      String
  ext_id       String
  settings_json Json     @default("{}")
  chat         Chat      @relation(fields: [chat_id], references: [id])
  extension    Extension @relation(fields: [ext_id], references: [id])

  @@id([chat_id, ext_id])
}