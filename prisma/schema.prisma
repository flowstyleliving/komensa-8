generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MediatorProfile {
  id            String  @id
  label         String
  assistant_id  String
  system_prompt String?
}

model Extension {
  id             String          @id
  kind           String
  name           String
  latest_version String
  created_at     DateTime        @default(now())
  chats          ChatExtension[]
  products       Product[]
  versions       ExtensionVersion[]
  sharedBoards   SharedBoard[]
}

model Product {
  id                String     @id @default(uuid())
  stripe_product_id String
  label             String
  ext_id            String?
  extension         Extension? @relation(fields: [ext_id], references: [id])
  subscriptions     Subscription[]
}

model ChatTurnState {
  id                 String   @id @default(cuid())
  chat_id            String   @unique
  thread_id          String?
  next_user_id       String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  current_turn_index Int      @default(0)
  next_role          String?
  turn_queue         Json     @default("[]")
  turn_expires_at    DateTime?
  chat               Chat     @relation("ChatTurnState", fields: [chat_id], references: [id])
}

model Event {
  id         String   @id @default(uuid())
  chat_id    String
  type       String
  data       Json
  created_at DateTime @default(now())
  seq        Int      @default(0)
  chat       Chat     @relation("ChatEvents", fields: [chat_id], references: [id])
  threads    ThreadEvent[]
}

model ChatParticipant {
  chat_id String
  user_id String
  role    String @default("user")
  chat    Chat   @relation(fields: [chat_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])

  @@id([chat_id, user_id])
}

model User {
  id                    String                 @id @default(uuid())
  display_name          String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  name                  String?
  username              String?                @unique
  password              String?
  email_verified        Boolean                @default(false)
  dateCreated           DateTime               @default(now())
  accounts              Account[]
  participants          ChatParticipant[]
  states                ParticipantState[]
  sessions              Session[]
  completions           ChatCompletionStatus[]
  feedback              ConversationFeedback[]
  waitingRoomAnswers    WaitingRoomAnswers[]
  contextSnapshot       UserContextSnapshot?
  threads               ContextThread[]
  billingCustomer       BillingCustomer?
  subscriptions         Subscription[]
  redeemedCoupons       RedeemedCoupon[]
  todos                 Todo[]
  attachments           Attachment[]
  liveSessions          LiveSession[]
  oauthTokens           OAuthToken[]
  pushSubscriptions     PushSubscription[]
  calendarEvents        CalendarEvent[]
  badges                UserBadge[]
  dailyMetrics          DailyChatMetric[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id                    String                 @id @default(uuid())
  origin                String                 @default("web")
  mediator_style        String                 @default("default")
  turn_taking           String                 @default("strict")
  status                String                 @default("active")
  created_at            DateTime               @default(now())
  settings              Json?                  @default("{}")
  extensions            ChatExtension[]
  participants          ChatParticipant[]
  turn_state            ChatTurnState?         @relation("ChatTurnState")
  events                Event[]                @relation("ChatEvents")
  states                ParticipantState[]
  completions           ChatCompletionStatus[]
  invites               ChatInvite[]
  feedback              ConversationFeedback[]
  waitingRoomAnswers    WaitingRoomAnswers[]
  todos                 Todo[]
  attachments           Attachment[]
  liveSessions          LiveSession[]
  sharedBoards          SharedBoard[]
  calendarEvents        CalendarEvent[]
}

model ParticipantState {
  chat_id    String
  user_id    String
  feelings   Json   @default("[]")
  needs      Json   @default("[]")
  viewpoints Json   @default("[]")
  chat       Chat   @relation(fields: [chat_id], references: [id])
  user       User   @relation(fields: [user_id], references: [id])

  @@id([chat_id, user_id])
}

model ChatExtension {
  chat_id       String
  ext_id        String
  settings_json Json      @default("{}")
  chat          Chat      @relation(fields: [chat_id], references: [id])
  extension     Extension @relation(fields: [ext_id], references: [id])

  @@id([chat_id, ext_id])
}

model ChatInvite {
  id          String    @id @default(uuid())
  chat_id     String
  email       String?
  token       String?
  expires_at  DateTime
  accepted_at DateTime?
  chat        Chat      @relation(fields: [chat_id], references: [id], onDelete: Cascade)

  @@map("chat_invites")
}

model ChatCompletionStatus {
  id                 String   @id @default(uuid())
  chat_id            String
  user_id            String
  marked_complete_at DateTime @default(now())
  completion_type    String   @default("natural")
  created_at         DateTime @default(now())
  chat               Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([chat_id, user_id])
  @@map("chat_completion_status")
}

model ConversationFeedback {
  id           String   @id @default(uuid())
  chat_id      String
  user_id      String
  rating       Int      // 1-5 star rating
  feedback     String?  // Optional text feedback
  user_type    String   @default("registered") // 'registered' or 'guest'
  submitted_at DateTime @default(now())
  chat         Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("conversation_feedback")
}

model WaitingRoomAnswers {
  id                     String   @id @default(uuid())
  chat_id                String
  user_id                String
  name                   String
  what_brought_you_here  String
  hope_to_accomplish     String
  current_feeling        String
  communication_style    String
  topics_to_avoid        String?
  is_ready               Boolean  @default(false)
  submitted_at           DateTime @default(now())
  chat                   Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user                   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([chat_id, user_id])
  @@map("waiting_room_answers")
}

model UserContextSnapshot {
  user_id        String   @id
  summary_json   Json
  updated_at     DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ContextThread {
  id        String        @id @default(uuid())
  user_id   String
  label     String
  created_at DateTime     @default(now())
  user      User          @relation(fields: [user_id], references: [id])
  events    ThreadEvent[]
}

model ThreadEvent {
  thread_id String
  event_id  String
  thread    ContextThread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  event     Event         @relation(fields: [event_id], references: [id])

  @@id([thread_id, event_id])
}

model ExtensionVersion {
  ext_id        String
  version       String
  manifest_json Json
  entry_path    String
  extension     Extension @relation(fields: [ext_id], references: [id], onDelete: Cascade)

  @@id([ext_id, version])
}

model BillingCustomer {
  user_id            String @id
  stripe_customer_id String
  user               User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Subscription {
  id                    String   @id @default(uuid())
  user_id              String
  product_id           String
  stripe_subscription_id String  @unique
  status               String
  current_period_end   DateTime
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product              Product  @relation(fields: [product_id], references: [id])
  payments             Payment[]
}

model Payment {
  id                String      @id @default(uuid())
  subscription_id   String
  stripe_invoice_id String      @unique
  amount            Int
  currency          String
  paid_at           DateTime
  subscription      Subscription @relation(fields: [subscription_id], references: [id])
}

model RedeemedCoupon {
  id              String   @id @default(uuid())
  user_id         String
  code            String
  stripe_coupon_id String
  redeemed_at     DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id])
}

model Todo {
  id         String   @id @default(uuid())
  chat_id    String
  label      String
  is_done    Boolean  @default(false)
  created_by String
  created_at DateTime @default(now())
  chat       Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  creator    User     @relation(fields: [created_by], references: [id])
}

model Attachment {
  id           String   @id @default(uuid())
  chat_id      String
  uploader_id  String
  storage_key  String
  mime         String
  size         Int
  transcript   String?
  created_at   DateTime @default(now())
  chat         Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploader_id], references: [id])
}

model LiveSession {
  id         String   @id @default(uuid())
  chat_id    String
  type       String
  started_by String
  started_at DateTime
  ended_at   DateTime?
  chat       Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  starter    User     @relation(fields: [started_by], references: [id])
}

model SharedBoard {
  id         String   @id @default(uuid())
  chat_id    String
  ext_id     String
  state_json Json
  updated_at DateTime @default(now())
  chat       Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  extension  Extension @relation(fields: [ext_id], references: [id])
}

model OAuthToken {
  id           String   @id @default(uuid())
  user_id      String
  provider     String
  access_token String
  refresh_token String?
  scopes       String
  expires_at   DateTime
  user         User     @relation(fields: [user_id], references: [id])
}

model PushSubscription {
  id           String   @id @default(uuid())
  user_id      String
  device_type  String
  token        String   @unique
  created_at   DateTime @default(now())
  last_seen_at DateTime?
  user         User     @relation(fields: [user_id], references: [id])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  chat_id     String
  external_id String
  provider    String
  created_by  String
  summary     String
  start_at    DateTime
  end_at      DateTime
  chat        Chat     @relation(fields: [chat_id], references: [id])
  creator     User     @relation(fields: [created_by], references: [id])
}

model UserBadge {
  id          String   @id @default(uuid())
  user_id     String
  badge_type  String
  earned_at   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
}

model DailyChatMetric {
  id          String   @id @default(uuid())
  user_id     String
  date        DateTime
  metric_type String
  value       Int
  user        User     @relation(fields: [user_id], references: [id])
}

model WebhookLog {
  id          String   @id @default(uuid())
  url         String
  payload     Json
  response    Json?
  status      Int?
  created_at  DateTime @default(now())
}
