"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/messages/route";
exports.ids = ["app/api/messages/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmessages%2Froute&page=%2Fapi%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmessages%2Froute.ts&appDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmessages%2Froute&page=%2Fapi%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmessages%2Froute.ts&appDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_michael_Documents_Komensa_5_komensa_app_api_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/messages/route.ts */ \"(rsc)/./app/api/messages/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/messages/route\",\n        pathname: \"/api/messages\",\n        filename: \"route\",\n        bundlePath: \"app/api/messages/route\"\n    },\n    resolvedPagePath: \"/Users/michael/Documents/Komensa-5/komensa/app/api/messages/route.ts\",\n    nextConfigOutput,\n    userland: _Users_michael_Documents_Komensa_5_komensa_app_api_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/messages/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjNfQGJhYmVsK2NvcmVANy4yNy4xX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMF9fcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtYXBwLWxvYWRlci5qcz9uYW1lPWFwcCUyRmFwaSUyRm1lc3NhZ2VzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZtZXNzYWdlcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm1lc3NhZ2VzJTJGcm91dGUudHMmYXBwRGlyPSUyRlVzZXJzJTJGbWljaGFlbCUyRkRvY3VtZW50cyUyRktvbWVuc2EtNSUyRmtvbWVuc2ElMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbWljaGFlbCUyRkRvY3VtZW50cyUyRktvbWVuc2EtNSUyRmtvbWVuc2EmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ29CO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va29tZW5zYS12NS8/YTk5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvbWljaGFlbC9Eb2N1bWVudHMvS29tZW5zYS01L2tvbWVuc2EvYXBwL2FwaS9tZXNzYWdlcy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbWVzc2FnZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9tZXNzYWdlc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbWVzc2FnZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbWljaGFlbC9Eb2N1bWVudHMvS29tZW5zYS01L2tvbWVuc2EvYXBwL2FwaS9tZXNzYWdlcy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvbWVzc2FnZXMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmessages%2Froute&page=%2Fapi%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmessages%2Froute.ts&appDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/[...nextauth]/route.ts":
/*!****************************************!*\
  !*** ./app/api/[...nextauth]/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/.pnpm/next-auth@4.24.11_@auth+core@0.39.1_next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_r_gev7rdmj5zqi6quqd4i72ffmfu/node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/prisma-adapter */ \"(rsc)/./node_modules/.pnpm/@auth+prisma-adapter@2.9.1_@prisma+client@6.8.2_prisma@6.8.2_typescript@5.8.3__typescript@5.8.3_/node_modules/@auth/prisma-adapter/index.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/.pnpm/next-auth@4.24.11_@auth+core@0.39.1_next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_r_gev7rdmj5zqi6quqd4i72ffmfu/node_modules/next-auth/providers/google.js\");\n\n\n\n\nconst authOptions = {\n    adapter: (0,_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__.PrismaAdapter)(_lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma),\n    providers: [\n        (0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    pages: {\n        signIn: \"/login\"\n    }\n};\nconst { GET, POST } = next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL1suLi5uZXh0YXV0aF0vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBaUM7QUFDbUI7QUFDZjtBQUVtQjtBQUVqRCxNQUFNSSxjQUErQjtJQUMxQ0MsU0FBU0osbUVBQWFBLENBQUNDLCtDQUFNQTtJQUM3QkksV0FBVztRQUNUSCxzRUFBY0EsQ0FBQztZQUNiSSxVQUFVQyxRQUFRQyxHQUFHLENBQUNDLGdCQUFnQjtZQUN0Q0MsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxvQkFBb0I7UUFDaEQ7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxPQUFPO1FBQ0xDLFFBQVE7SUFDVjtBQUNGLEVBQUM7QUFFTSxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFLEdBQUdsQixnREFBUUEsQ0FBQ0ksYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2tvbWVuc2EtdjUvLi9hcHAvYXBpL1suLi5uZXh0YXV0aF0vcm91dGUudHM/YzFhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV4dEF1dGggZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCB7IFByaXNtYUFkYXB0ZXIgfSBmcm9tICdAYXV0aC9wcmlzbWEtYWRhcHRlcidcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSdcbmltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gJ25leHQtYXV0aCdcbmltcG9ydCBHb29nbGVQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2dvb2dsZSc7XG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9uczogTmV4dEF1dGhPcHRpb25zID0ge1xuICBhZGFwdGVyOiBQcmlzbWFBZGFwdGVyKHByaXNtYSksXG4gIHByb3ZpZGVyczogW1xuICAgIEdvb2dsZVByb3ZpZGVyKHtcbiAgICAgIGNsaWVudElkOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEISxcbiAgICAgIGNsaWVudFNlY3JldDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQhLFxuICAgIH0pXG4gIF0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogJ2p3dCdcbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46ICcvbG9naW4nXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHsgR0VULCBQT1NUIH0gPSBOZXh0QXV0aChhdXRoT3B0aW9ucyk7XG4iXSwibmFtZXMiOlsiTmV4dEF1dGgiLCJQcmlzbWFBZGFwdGVyIiwicHJpc21hIiwiR29vZ2xlUHJvdmlkZXIiLCJhdXRoT3B0aW9ucyIsImFkYXB0ZXIiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQ0xJRU5UX0lEIiwiY2xpZW50U2VjcmV0IiwiR09PR0xFX0NMSUVOVF9TRUNSRVQiLCJzZXNzaW9uIiwic3RyYXRlZ3kiLCJwYWdlcyIsInNpZ25JbiIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/[...nextauth]/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/messages/route.ts":
/*!***********************************!*\
  !*** ./app/api/messages/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./lib/auth.ts\");\n/* harmony import */ var _features_ai_services_generateAIReply__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/features/ai/services/generateAIReply */ \"(rsc)/./features/ai/services/generateAIReply.ts\");\n/* harmony import */ var _lib_pusher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/pusher */ \"(rsc)/./lib/pusher.ts\");\n/* harmony import */ var _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/features/chat/services/turnManager */ \"(rsc)/./features/chat/services/turnManager.ts\");\n// GPT CONTEXT:\n// This file handles chat message retrieval and posting, including turn-taking enforcement.\n// Related modules: /features/ai/generateAIReply.ts, /lib/prisma.ts\n// Do NOT modify /lib/redis.ts or /features/chat/events.ts in this file.\n\n\n\n\n\n\n// Helper function to get user ID from session or demo cookie\nfunction getUserId(req, session) {\n    // First try session\n    if (session?.user?.id) {\n        return session.user.id;\n    }\n    // Then try demo cookie\n    const demoUserCookie = req.cookies.get(\"demo_user\")?.value;\n    if (demoUserCookie) {\n        try {\n            const demoUser = JSON.parse(demoUserCookie);\n            return demoUser.id;\n        } catch (e) {\n            console.error(\"Failed to parse demo user cookie:\", e);\n        }\n    }\n    return null;\n}\n// GET: Fetch messages for a given chat\nasync function GET(req) {\n    const chatId = req.nextUrl.searchParams.get(\"chatId\");\n    if (!chatId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Missing chatId\"\n        }, {\n            status: 400\n        });\n    }\n    const messages = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.event.findMany({\n        where: {\n            chat_id: chatId\n        },\n        orderBy: {\n            created_at: \"asc\"\n        }\n    });\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        messages\n    });\n}\n// POST: Send a new message and update turn state\nasync function POST(req) {\n    const session = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_2__.auth)();\n    const senderId = getUserId(req, session);\n    if (!senderId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Unauthorized\"\n        }, {\n            status: 401\n        });\n    }\n    const body = await req.json();\n    const { chatId, content } = body;\n    if (!chatId || !content) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Missing chatId or content\"\n        }, {\n            status: 400\n        });\n    }\n    console.log(\"[Messages API] Sending message:\", {\n        chatId,\n        senderId,\n        content\n    });\n    const channelName = (0,_lib_pusher__WEBPACK_IMPORTED_MODULE_4__.getChatChannelName)(chatId);\n    const turnManager = new _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.TurnManager(chatId);\n    // Check if this is a demo chat\n    const chat = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.chat.findUnique({\n        where: {\n            id: chatId\n        },\n        include: {\n            participants: true\n        }\n    });\n    if (chat?.origin === \"demo\") {\n        // Use role-based turn management for demo chats\n        console.log(\"[Messages API] Demo chat detected, using role-based turn management\");\n        const canSend = await turnManager.canUserSendMessage(senderId);\n        if (!canSend) {\n            const currentTurn = await turnManager.getCurrentTurn();\n            console.log(\"[Messages API] Not user turn (role-based):\", {\n                senderId,\n                currentRole: currentTurn?.next_role,\n                currentUserId: currentTurn?.next_user_id\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Not your turn\"\n            }, {\n                status: 403\n            });\n        }\n    } else {\n        // Use legacy turn management for non-demo chats\n        console.log(\"[Messages API] Non-demo chat, using legacy turn management\");\n        const turn = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.chatTurnState.findUnique({\n            where: {\n                chat_id: chatId\n            }\n        });\n        console.log(\"[Messages API] Current turn state:\", turn);\n        if (turn?.next_user_id && turn.next_user_id !== senderId) {\n            console.log(\"[Messages API] Not user turn:\", {\n                expected: turn.next_user_id,\n                actual: senderId\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Not your turn\"\n            }, {\n                status: 403\n            });\n        }\n    }\n    // Save message as event\n    const newMessage = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.event.create({\n        data: {\n            chat_id: chatId,\n            type: \"message\",\n            data: {\n                content,\n                senderId\n            },\n            created_at: new Date(),\n            seq: 0\n        }\n    });\n    console.log(\"[Messages API] Message saved to database\");\n    // Emit new message event\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_4__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_4__.PUSHER_EVENTS.NEW_MESSAGE, {\n        id: newMessage.id,\n        created_at: newMessage.created_at.toISOString(),\n        data: {\n            content,\n            senderId\n        }\n    });\n    if (chat?.origin === \"demo\") {\n        // Use role-based turn management\n        console.log(\"[Messages API] Setting turn to mediator for demo chat\");\n        await turnManager.setTurnToRole(_features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.MEDIATOR);\n    } else {\n        // Use legacy turn management\n        console.log(\"[Messages API] Setting turn to assistant for non-demo chat\");\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.chatTurnState.upsert({\n            where: {\n                chat_id: chatId\n            },\n            update: {\n                next_user_id: \"assistant\"\n            },\n            create: {\n                chat_id: chatId,\n                next_user_id: \"assistant\"\n            }\n        });\n        // Emit turn update\n        await _lib_pusher__WEBPACK_IMPORTED_MODULE_4__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_4__.PUSHER_EVENTS.TURN_UPDATE, {\n            next_user_id: \"assistant\"\n        });\n    }\n    // Begin AI response\n    (0,_features_ai_services_generateAIReply__WEBPACK_IMPORTED_MODULE_3__.generateAIReply)({\n        chatId,\n        userId: senderId,\n        userMessage: content\n    }).catch((err)=>{\n        console.error(\"[AI] Failed to generate reply:\", err);\n    });\n    console.log(\"[Messages API] AI reply generation started\");\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        ok: true\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/messages/route.ts\n");

/***/ }),

/***/ "(rsc)/./features/ai/services/formatStateForPrompt.ts":
/*!******************************************************!*\
  !*** ./features/ai/services/formatStateForPrompt.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatStateForPrompt: () => (/* binding */ formatStateForPrompt)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n// GPT CONTEXT:\n// This file converts chat state (feelings, needs, recent messages) into a structured prompt for the AI.\n// Related modules: /features/ai/generateAIReply.ts, /lib/prisma.ts\n// Do NOT handle AI streaming or Redis here.\n\nasync function formatStateForPrompt({ chatId, userId, userMessage }) {\n    const [participantStates, recentEvents, participants] = await Promise.all([\n        _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.event.findMany({\n            where: {\n                chat_id: chatId,\n                type: \"participant_state\"\n            },\n            orderBy: {\n                created_at: \"desc\"\n            },\n            take: 10\n        }),\n        _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.event.findMany({\n            where: {\n                chat_id: chatId\n            },\n            orderBy: {\n                created_at: \"desc\"\n            },\n            take: 10\n        }),\n        _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chatParticipant.findMany({\n            where: {\n                chat_id: chatId\n            },\n            include: {\n                user: true\n            }\n        })\n    ]);\n    const aliasMap = {};\n    for (const p of participants){\n        const initial = p.user?.display_name?.charAt(0) ?? \"U\";\n        const role = p.role ?? \"user\";\n        aliasMap[p.user_id] = `${initial}. (${role})`;\n    }\n    const views = participantStates.map((ps)=>{\n        const data = ps.data;\n        const userId = data.userId || data.user_id;\n        const alias = aliasMap[userId] || `User ${userId?.slice(0, 5) || \"Unknown\"}`;\n        return `${alias}:\n- Feels: ${(data.feelings || []).join(\", \")}\n- Needs: ${(data.needs || []).join(\", \")}\n- Views: ${Object.entries(data.viewpoints || {}).map(([k, v])=>`${k}: ${v}`).join(\"; \")}`;\n    }).join(\"\\n\\n\");\n    const recentText = recentEvents.filter((e)=>e.type === \"message\").map((e)=>{\n        const data = e.data;\n        const senderId = data.senderId;\n        const sender = aliasMap[senderId] || \"User\";\n        return `${sender}: ${data.content || \"\"}`;\n    }).reverse().join(\"\\n\");\n    const currentUserAlias = aliasMap[userId] || `User ${userId?.slice(0, 5) || \"Unknown\"}`;\n    return `<Current State>\nParticipants:\n${views}\n\nRecent Messages:\n${recentText}\n\nLatest Message:\n${currentUserAlias}: ${userMessage}\n\nInstruction:\nRespond thoughtfully as a mediator, drawing from the current emotional and conversational state.\n</Current State>`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9mZWF0dXJlcy9haS9zZXJ2aWNlcy9mb3JtYXRTdGF0ZUZvclByb21wdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGVBQWU7QUFDZix3R0FBd0c7QUFDeEcsbUVBQW1FO0FBQ25FLDRDQUE0QztBQUVOO0FBRy9CLGVBQWVDLHFCQUFxQixFQUN6Q0MsTUFBTSxFQUNOQyxNQUFNLEVBQ05DLFdBQVcsRUFLWjtJQUNDLE1BQU0sQ0FBQ0MsbUJBQW1CQyxjQUFjQyxhQUFhLEdBQUcsTUFBTUMsUUFBUUMsR0FBRyxDQUFDO1FBQ3hFVCwrQ0FBTUEsQ0FBQ1UsS0FBSyxDQUFDQyxRQUFRLENBQUM7WUFDcEJDLE9BQU87Z0JBQ0xDLFNBQVNYO2dCQUNUWSxNQUFNO1lBQ1I7WUFDQUMsU0FBUztnQkFBRUMsWUFBWTtZQUFPO1lBQzlCQyxNQUFNO1FBQ1I7UUFDQWpCLCtDQUFNQSxDQUFDVSxLQUFLLENBQUNDLFFBQVEsQ0FBQztZQUNwQkMsT0FBTztnQkFBRUMsU0FBU1g7WUFBTztZQUN6QmEsU0FBUztnQkFBRUMsWUFBWTtZQUFPO1lBQzlCQyxNQUFNO1FBQ1I7UUFDQWpCLCtDQUFNQSxDQUFDa0IsZUFBZSxDQUFDUCxRQUFRLENBQUM7WUFDOUJDLE9BQU87Z0JBQUVDLFNBQVNYO1lBQU87WUFDekJpQixTQUFTO2dCQUFFQyxNQUFNO1lBQUs7UUFDeEI7S0FDRDtJQUVELE1BQU1DLFdBQW1DLENBQUM7SUFDMUMsS0FBSyxNQUFNQyxLQUFLZixhQUFjO1FBQzVCLE1BQU1nQixVQUFVRCxFQUFFRixJQUFJLEVBQUVJLGNBQWNDLE9BQU8sTUFBTTtRQUNuRCxNQUFNQyxPQUFPSixFQUFFSSxJQUFJLElBQUk7UUFDdkJMLFFBQVEsQ0FBQ0MsRUFBRUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFSixRQUFRLEdBQUcsRUFBRUcsS0FBSyxDQUFDLENBQUM7SUFDL0M7SUFFQSxNQUFNRSxRQUFRdkIsa0JBQWtCd0IsR0FBRyxDQUFDLENBQUNDO1FBQ25DLE1BQU1DLE9BQU9ELEdBQUdDLElBQUk7UUFDcEIsTUFBTTVCLFNBQVM0QixLQUFLNUIsTUFBTSxJQUFJNEIsS0FBS0osT0FBTztRQUMxQyxNQUFNSyxRQUFRWCxRQUFRLENBQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUVBLFFBQVE4QixNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUM7UUFDNUUsT0FBTyxDQUFDLEVBQUVELE1BQU07U0FDWCxFQUFFLENBQUNELEtBQUtHLFFBQVEsSUFBSSxFQUFFLEVBQUVDLElBQUksQ0FBQyxNQUFNO1NBQ25DLEVBQUUsQ0FBQ0osS0FBS0ssS0FBSyxJQUFJLEVBQUUsRUFBRUQsSUFBSSxDQUFDLE1BQU07U0FDaEMsRUFBRSxPQUFRRyxPQUFPLENBQUNQLEtBQUtRLFVBQVUsSUFBSSxDQUFDLEdBQUdWLEdBQUcsQ0FBQyxDQUFDLENBQUNXLEdBQUdDLEVBQUUsR0FBSyxDQUFDLEVBQUVELEVBQUUsRUFBRSxFQUFFQyxFQUFFLENBQUMsRUFBR04sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzRixHQUFHQSxJQUFJLENBQUM7SUFFUixNQUFNTyxhQUFhcEMsYUFDaEJxQyxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUU5QixJQUFJLEtBQUssV0FDdkJlLEdBQUcsQ0FBQ2UsQ0FBQUE7UUFDSCxNQUFNYixPQUFPYSxFQUFFYixJQUFJO1FBQ25CLE1BQU1jLFdBQVdkLEtBQUtjLFFBQVE7UUFDOUIsTUFBTUMsU0FBU3pCLFFBQVEsQ0FBQ3dCLFNBQVMsSUFBSTtRQUNyQyxPQUFPLENBQUMsRUFBRUMsT0FBTyxFQUFFLEVBQUVmLEtBQUtnQixPQUFPLElBQUksR0FBRyxDQUFDO0lBQzNDLEdBQUdDLE9BQU8sR0FBR2IsSUFBSSxDQUFDO0lBRXBCLE1BQU1jLG1CQUFtQjVCLFFBQVEsQ0FBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRUEsUUFBUThCLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQztJQUV2RixPQUFPLENBQUM7O0FBRVYsRUFBRUwsTUFBTTs7O0FBR1IsRUFBRWMsV0FBVzs7O0FBR2IsRUFBRU8saUJBQWlCLEVBQUUsRUFBRTdDLFlBQVk7Ozs7Z0JBSW5CLENBQUM7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rb21lbnNhLXY1Ly4vZmVhdHVyZXMvYWkvc2VydmljZXMvZm9ybWF0U3RhdGVGb3JQcm9tcHQudHM/MmZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHUFQgQ09OVEVYVDpcbi8vIFRoaXMgZmlsZSBjb252ZXJ0cyBjaGF0IHN0YXRlIChmZWVsaW5ncywgbmVlZHMsIHJlY2VudCBtZXNzYWdlcykgaW50byBhIHN0cnVjdHVyZWQgcHJvbXB0IGZvciB0aGUgQUkuXG4vLyBSZWxhdGVkIG1vZHVsZXM6IC9mZWF0dXJlcy9haS9nZW5lcmF0ZUFJUmVwbHkudHMsIC9saWIvcHJpc21hLnRzXG4vLyBEbyBOT1QgaGFuZGxlIEFJIHN0cmVhbWluZyBvciBSZWRpcyBoZXJlLlxuXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuaW1wb3J0IHR5cGUgeyBFdmVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvcm1hdFN0YXRlRm9yUHJvbXB0KHtcbiAgY2hhdElkLFxuICB1c2VySWQsXG4gIHVzZXJNZXNzYWdlXG59OiB7XG4gIGNoYXRJZDogc3RyaW5nO1xuICB1c2VySWQ6IHN0cmluZztcbiAgdXNlck1lc3NhZ2U6IHN0cmluZztcbn0pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBbcGFydGljaXBhbnRTdGF0ZXMsIHJlY2VudEV2ZW50cywgcGFydGljaXBhbnRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcmlzbWEuZXZlbnQuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgY2hhdF9pZDogY2hhdElkLFxuICAgICAgICB0eXBlOiAncGFydGljaXBhbnRfc3RhdGUnXG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkX2F0OiAnZGVzYycgfSxcbiAgICAgIHRha2U6IDEwXG4gICAgfSksXG4gICAgcHJpc21hLmV2ZW50LmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IGNoYXRfaWQ6IGNoYXRJZCB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkX2F0OiAnZGVzYycgfSxcbiAgICAgIHRha2U6IDEwXG4gICAgfSksXG4gICAgcHJpc21hLmNoYXRQYXJ0aWNpcGFudC5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyBjaGF0X2lkOiBjaGF0SWQgfSxcbiAgICAgIGluY2x1ZGU6IHsgdXNlcjogdHJ1ZSB9XG4gICAgfSlcbiAgXSk7XG5cbiAgY29uc3QgYWxpYXNNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgZm9yIChjb25zdCBwIG9mIHBhcnRpY2lwYW50cykge1xuICAgIGNvbnN0IGluaXRpYWwgPSBwLnVzZXI/LmRpc3BsYXlfbmFtZT8uY2hhckF0KDApID8/ICdVJztcbiAgICBjb25zdCByb2xlID0gcC5yb2xlID8/ICd1c2VyJztcbiAgICBhbGlhc01hcFtwLnVzZXJfaWRdID0gYCR7aW5pdGlhbH0uICgke3JvbGV9KWA7XG4gIH1cblxuICBjb25zdCB2aWV3cyA9IHBhcnRpY2lwYW50U3RhdGVzLm1hcCgocHMpID0+IHtcbiAgICBjb25zdCBkYXRhID0gcHMuZGF0YSBhcyBhbnk7XG4gICAgY29uc3QgdXNlcklkID0gZGF0YS51c2VySWQgfHwgZGF0YS51c2VyX2lkO1xuICAgIGNvbnN0IGFsaWFzID0gYWxpYXNNYXBbdXNlcklkXSB8fCBgVXNlciAke3VzZXJJZD8uc2xpY2UoMCwgNSkgfHwgJ1Vua25vd24nfWA7XG4gICAgcmV0dXJuIGAke2FsaWFzfTpcbi0gRmVlbHM6ICR7KGRhdGEuZmVlbGluZ3MgfHwgW10pLmpvaW4oJywgJyl9XG4tIE5lZWRzOiAkeyhkYXRhLm5lZWRzIHx8IFtdKS5qb2luKCcsICcpfVxuLSBWaWV3czogJHsoT2JqZWN0LmVudHJpZXMoZGF0YS52aWV3cG9pbnRzIHx8IHt9KS5tYXAoKFtrLCB2XSkgPT4gYCR7a306ICR7dn1gKSkuam9pbignOyAnKX1gO1xuICB9KS5qb2luKCdcXG5cXG4nKTtcblxuICBjb25zdCByZWNlbnRUZXh0ID0gcmVjZW50RXZlbnRzXG4gICAgLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ21lc3NhZ2UnKVxuICAgIC5tYXAoZSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZS5kYXRhIGFzIGFueTtcbiAgICAgIGNvbnN0IHNlbmRlcklkID0gZGF0YS5zZW5kZXJJZDtcbiAgICAgIGNvbnN0IHNlbmRlciA9IGFsaWFzTWFwW3NlbmRlcklkXSB8fCAnVXNlcic7XG4gICAgICByZXR1cm4gYCR7c2VuZGVyfTogJHtkYXRhLmNvbnRlbnQgfHwgJyd9YDtcbiAgICB9KS5yZXZlcnNlKCkuam9pbignXFxuJyk7XG5cbiAgY29uc3QgY3VycmVudFVzZXJBbGlhcyA9IGFsaWFzTWFwW3VzZXJJZF0gfHwgYFVzZXIgJHt1c2VySWQ/LnNsaWNlKDAsIDUpIHx8ICdVbmtub3duJ31gO1xuXG4gIHJldHVybiBgPEN1cnJlbnQgU3RhdGU+XG5QYXJ0aWNpcGFudHM6XG4ke3ZpZXdzfVxuXG5SZWNlbnQgTWVzc2FnZXM6XG4ke3JlY2VudFRleHR9XG5cbkxhdGVzdCBNZXNzYWdlOlxuJHtjdXJyZW50VXNlckFsaWFzfTogJHt1c2VyTWVzc2FnZX1cblxuSW5zdHJ1Y3Rpb246XG5SZXNwb25kIHRob3VnaHRmdWxseSBhcyBhIG1lZGlhdG9yLCBkcmF3aW5nIGZyb20gdGhlIGN1cnJlbnQgZW1vdGlvbmFsIGFuZCBjb252ZXJzYXRpb25hbCBzdGF0ZS5cbjwvQ3VycmVudCBTdGF0ZT5gO1xufSJdLCJuYW1lcyI6WyJwcmlzbWEiLCJmb3JtYXRTdGF0ZUZvclByb21wdCIsImNoYXRJZCIsInVzZXJJZCIsInVzZXJNZXNzYWdlIiwicGFydGljaXBhbnRTdGF0ZXMiLCJyZWNlbnRFdmVudHMiLCJwYXJ0aWNpcGFudHMiLCJQcm9taXNlIiwiYWxsIiwiZXZlbnQiLCJmaW5kTWFueSIsIndoZXJlIiwiY2hhdF9pZCIsInR5cGUiLCJvcmRlckJ5IiwiY3JlYXRlZF9hdCIsInRha2UiLCJjaGF0UGFydGljaXBhbnQiLCJpbmNsdWRlIiwidXNlciIsImFsaWFzTWFwIiwicCIsImluaXRpYWwiLCJkaXNwbGF5X25hbWUiLCJjaGFyQXQiLCJyb2xlIiwidXNlcl9pZCIsInZpZXdzIiwibWFwIiwicHMiLCJkYXRhIiwiYWxpYXMiLCJzbGljZSIsImZlZWxpbmdzIiwiam9pbiIsIm5lZWRzIiwiT2JqZWN0IiwiZW50cmllcyIsInZpZXdwb2ludHMiLCJrIiwidiIsInJlY2VudFRleHQiLCJmaWx0ZXIiLCJlIiwic2VuZGVySWQiLCJzZW5kZXIiLCJjb250ZW50IiwicmV2ZXJzZSIsImN1cnJlbnRVc2VyQWxpYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./features/ai/services/formatStateForPrompt.ts\n");

/***/ }),

/***/ "(rsc)/./features/ai/services/generateAIReply.ts":
/*!*************************************************!*\
  !*** ./features/ai/services/generateAIReply.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAIReply: () => (/* binding */ generateAIReply)\n/* harmony export */ });\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./lib/openai.ts\");\n/* harmony import */ var _lib_pusher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/pusher */ \"(rsc)/./lib/pusher.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var _formatStateForPrompt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatStateForPrompt */ \"(rsc)/./features/ai/services/formatStateForPrompt.ts\");\n/* harmony import */ var _generateJordanReply__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./generateJordanReply */ \"(rsc)/./features/ai/services/generateJordanReply.ts\");\n/* harmony import */ var _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/features/chat/services/turnManager */ \"(rsc)/./features/chat/services/turnManager.ts\");\n// GPT CONTEXT:\n// This file triggers an OpenAI Assistant response based on a user's message.\n// It retrieves current state, formats the prompt, sends it to OpenAI, and stores the reply.\n// Related: /lib/openai.ts, /features/ai/formatStateForPrompt.ts, /lib/prisma.ts\n\n\n\n\n\n\n// Validate critical environment variables\nconst OPENAI_ASSISTANT_ID = process.env.OPENAI_ASSISTANT_ID1;\nif (!OPENAI_ASSISTANT_ID) {\n    throw new Error(\"OPENAI_ASSISTANT_ID environment variable is not set\");\n}\n// Type guard to ensure assistant_id is a string\nfunction assertAssistantId(id) {\n    if (!id) {\n        throw new Error(\"OPENAI_ASSISTANT_ID environment variable is not set\");\n    }\n}\nasync function generateAIReply({ chatId, userId, userMessage }) {\n    console.log(\"[AI Reply] Starting AI reply generation...\", {\n        chatId,\n        userId\n    });\n    const channelName = (0,_lib_pusher__WEBPACK_IMPORTED_MODULE_1__.getChatChannelName)(chatId);\n    const turnManager = new _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.TurnManager(chatId);\n    // Emit typing indicator\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.ASSISTANT_TYPING, {\n        isTyping: true\n    });\n    // Get current state\n    console.log(\"[AI Reply] Formatting state for prompt...\");\n    const state = await (0,_formatStateForPrompt__WEBPACK_IMPORTED_MODULE_3__.formatStateForPrompt)({\n        chatId,\n        userId,\n        userMessage\n    });\n    console.log(\"[AI Reply] State formatted:\", state);\n    // Add state update instruction to the prompt\n    const fullPrompt = `${state}\n\nRespond thoughtfully as a mediator, drawing from the current emotional and conversational state.`;\n    console.log(\"[AI Reply] Full prompt prepared:\", fullPrompt);\n    // Get or create thread\n    console.log(\"[AI Reply] Getting or creating thread...\");\n    let threadId;\n    const existingThread = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.chatTurnState.findUnique({\n        where: {\n            chat_id: chatId\n        },\n        select: {\n            thread_id: true\n        }\n    });\n    if (existingThread?.thread_id) {\n        threadId = existingThread.thread_id;\n        console.log(\"[AI Reply] Using existing thread:\", threadId);\n    } else {\n        console.log(\"[AI Reply] Creating new thread...\");\n        const thread = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.create());\n        threadId = thread.id;\n        console.log(\"[AI Reply] Created new thread:\", threadId);\n        // Store thread ID for future use with proper initialization\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.chatTurnState.upsert({\n            where: {\n                chat_id: chatId\n            },\n            update: {\n                thread_id: threadId\n            },\n            create: {\n                chat_id: chatId,\n                thread_id: threadId,\n                next_user_id: \"assistant\"\n            }\n        });\n        console.log(\"[AI Reply] Thread ID stored in database\");\n    }\n    // Add message to thread\n    console.log(\"[AI Reply] Adding message to thread...\");\n    await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.messages.create(threadId, {\n            role: \"user\",\n            content: fullPrompt\n        }));\n    console.log(\"[AI Reply] Message added to thread\");\n    // Start run (non-streaming for simplicity and speed)\n    let fullMessage = \"\";\n    try {\n        console.log(\"[AI Reply] Starting AI run...\");\n        assertAssistantId(OPENAI_ASSISTANT_ID);\n        const run = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.create(threadId, {\n                assistant_id: OPENAI_ASSISTANT_ID\n            }));\n        console.log(\"[AI Reply] Run created:\", run.id);\n        let completedRun = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.retrieve(threadId, run.id));\n        console.log(\"[AI Reply] Initial run status:\", completedRun.status);\n        while(completedRun.status === \"in_progress\" || completedRun.status === \"queued\"){\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            try {\n                completedRun = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.retrieve(threadId, run.id));\n                console.log(\"[AI Reply] Run status:\", completedRun.status);\n            } catch (error) {\n                console.error(\"[AI Reply] Run retrieval failed:\", error);\n                throw new Error(\"Failed to get AI response during polling\", {\n                    cause: error\n                });\n            }\n        }\n        if (completedRun.status === \"failed\") {\n            console.error(\"[AI Reply] Run failed:\", completedRun.last_error);\n            throw new Error(`AI run failed: ${completedRun.last_error?.message}`);\n        }\n        // Get messages\n        console.log(\"[AI Reply] Retrieving messages...\");\n        const messages = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.messages.list(threadId));\n        const assistantMessage = messages.data[0];\n        if (!assistantMessage || !assistantMessage.content) {\n            console.error(\"[AI Reply] No assistant message found\");\n            throw new Error(\"No assistant message returned\");\n        }\n        fullMessage = assistantMessage.content.filter((c)=>c.type === \"text\").map((c)=>c.text.value).join(\"\");\n        console.log(\"[AI Reply] Message retrieved:\", fullMessage);\n    } catch (error) {\n        console.error(\"[AI Reply] Failed to generate AI response:\", error);\n        // Stop typing indicator on error\n        await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.ASSISTANT_TYPING, {\n            isTyping: false\n        });\n        throw error;\n    }\n    // Stop typing indicator\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.ASSISTANT_TYPING, {\n        isTyping: false\n    });\n    // Process the message (no longer need to parse STATE_UPDATE_JSON)\n    console.log(\"[AI Reply] Processing message...\");\n    const cleanedMessage = fullMessage.trim();\n    // Store message in database\n    console.log(\"[AI Reply] Storing message in database...\");\n    const newMessage = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.event.create({\n        data: {\n            chat_id: chatId,\n            type: \"message\",\n            data: {\n                content: cleanedMessage,\n                senderId: \"assistant\"\n            }\n        }\n    });\n    // Emit new message event\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.NEW_MESSAGE, {\n        id: newMessage.id,\n        created_at: newMessage.created_at.toISOString(),\n        data: {\n            content: cleanedMessage,\n            senderId: \"assistant\"\n        }\n    });\n    // Check if this is a demo chat and handle the conversation flow\n    const chat = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.chat.findUnique({\n        where: {\n            id: chatId\n        },\n        include: {\n            participants: true\n        }\n    });\n    if (chat?.origin === \"demo\") {\n        console.log(\"[AI Reply] Demo chat detected, using role-based turn management...\");\n        // Get the role of the user who sent the message that triggered this mediator response\n        const userRole = await turnManager.getRoleForUserId(userId);\n        console.log(\"[AI Reply] User role who triggered mediator:\", userRole);\n        if (userRole === _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.USER_A) {\n            // Mediator just responded to User A → next turn should be Jordan\n            console.log(\"[AI Reply] Mediator responded to User A, setting turn to Jordan...\");\n            await turnManager.setTurnToRole(_features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.JORDAN);\n            // Trigger Jordan's response automatically\n            const jordanUserId = await turnManager.getUserIdForRole(_features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.JORDAN);\n            if (jordanUserId) {\n                (0,_generateJordanReply__WEBPACK_IMPORTED_MODULE_4__.generateJordanReply)({\n                    chatId,\n                    jordanUserId,\n                    conversationContext: cleanedMessage\n                }).catch((error)=>{\n                    console.error(\"[AI Reply] Failed to generate Jordan response:\", error);\n                });\n            }\n        } else if (userRole === _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.JORDAN) {\n            // Mediator just responded to Jordan → next turn should be User A\n            console.log(\"[AI Reply] Mediator responded to Jordan, setting turn to User A...\");\n            await turnManager.setTurnToRole(_features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_5__.DEMO_ROLES.USER_A);\n        } else {\n            // Fallback: advance to next turn in sequence\n            console.log(\"[AI Reply] Unknown user role, advancing turn normally...\");\n            await turnManager.advanceTurn();\n        }\n    } else {\n        // For non-demo chats, use the old logic\n        console.log(\"[AI Reply] Non-demo chat, using legacy turn management...\");\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.chatTurnState.update({\n            where: {\n                chat_id: chatId\n            },\n            data: {\n                next_user_id: userId\n            }\n        });\n        // Emit turn update\n        await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.TURN_UPDATE, {\n            next_user_id: userId\n        });\n    }\n    console.log(\"[AI Reply] Generation complete\");\n    return {\n        content: cleanedMessage\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./features/ai/services/generateAIReply.ts\n");

/***/ }),

/***/ "(rsc)/./features/ai/services/generateJordanReply.ts":
/*!*****************************************************!*\
  !*** ./features/ai/services/generateJordanReply.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateJordanReply: () => (/* binding */ generateJordanReply)\n/* harmony export */ });\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./lib/openai.ts\");\n/* harmony import */ var _lib_pusher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/pusher */ \"(rsc)/./lib/pusher.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/features/chat/services/turnManager */ \"(rsc)/./features/chat/services/turnManager.ts\");\n// GPT CONTEXT:\n// This file generates AI responses for Jordan (the AI user participant)\n// Jordan responds as a user, not as a mediator\n// Related: /features/ai/services/generateAIReply.ts\n\n\n\n\n// Jordan's assistant ID (hardcoded for demo)\nconst JORDAN_ASSISTANT_ID = \"asst_NaNyg64IlU3rbkA9kdldzZJC\";\nasync function generateJordanReply({ chatId, jordanUserId, conversationContext }) {\n    console.log(\"[Jordan AI] Starting Jordan reply generation...\", {\n        chatId,\n        jordanUserId\n    });\n    const channelName = (0,_lib_pusher__WEBPACK_IMPORTED_MODULE_1__.getChatChannelName)(chatId);\n    const turnManager = new _features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_3__.TurnManager(chatId);\n    // Emit typing indicator for Jordan\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.USER_TYPING, {\n        userId: jordanUserId,\n        isTyping: true\n    });\n    // Get recent conversation for context\n    const recentMessages = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.event.findMany({\n        where: {\n            chat_id: chatId,\n            type: \"message\"\n        },\n        orderBy: {\n            created_at: \"desc\"\n        },\n        take: 5\n    });\n    const contextPrompt = `You are Jordan, a participant in a mediated conversation. \nRecent conversation:\n${recentMessages.reverse().map((msg)=>{\n        const data = msg.data;\n        const sender = data.senderId === \"assistant\" ? \"AI Mediator\" : data.senderId === jordanUserId ? \"You (Jordan)\" : \"User A\";\n        return `${sender}: ${data.content}`;\n    }).join(\"\\n\")}\n\nRespond naturally as Jordan. Keep your response conversational and authentic to the discussion about budget re-evaluation.`;\n    console.log(\"[Jordan AI] Context prompt prepared\");\n    // Get or create thread for Jordan\n    let threadId;\n    const existingThread = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.chatTurnState.findUnique({\n        where: {\n            chat_id: chatId\n        },\n        select: {\n            thread_id: true\n        }\n    });\n    if (existingThread?.thread_id) {\n        threadId = existingThread.thread_id;\n        console.log(\"[Jordan AI] Using existing thread:\", threadId);\n    } else {\n        console.log(\"[Jordan AI] Creating new thread for Jordan...\");\n        const thread = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.create());\n        threadId = thread.id;\n        console.log(\"[Jordan AI] Created new thread:\", threadId);\n    }\n    // Add message to thread\n    console.log(\"[Jordan AI] Adding message to thread...\");\n    await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.messages.create(threadId, {\n            role: \"user\",\n            content: contextPrompt\n        }));\n    // Start run\n    let fullMessage = \"\";\n    try {\n        console.log(\"[Jordan AI] Starting AI run for Jordan...\");\n        const run = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.create(threadId, {\n                assistant_id: JORDAN_ASSISTANT_ID\n            }));\n        console.log(\"[Jordan AI] Run created:\", run.id);\n        let completedRun = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.retrieve(threadId, run.id));\n        console.log(\"[Jordan AI] Initial run status:\", completedRun.status);\n        while(completedRun.status === \"in_progress\" || completedRun.status === \"queued\"){\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            try {\n                completedRun = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.runs.retrieve(threadId, run.id));\n                console.log(\"[Jordan AI] Run status:\", completedRun.status);\n            } catch (error) {\n                console.error(\"[Jordan AI] Run retrieval failed:\", error);\n                throw new Error(\"Failed to get Jordan AI response during polling\", {\n                    cause: error\n                });\n            }\n        }\n        if (completedRun.status === \"failed\") {\n            console.error(\"[Jordan AI] Run failed:\", completedRun.last_error);\n            throw new Error(`Jordan AI run failed: ${completedRun.last_error?.message}`);\n        }\n        // Get messages\n        console.log(\"[Jordan AI] Retrieving messages...\");\n        const messages = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.runWithRetries)(()=>_lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.beta.threads.messages.list(threadId));\n        const assistantMessage = messages.data[0];\n        if (!assistantMessage || !assistantMessage.content) {\n            console.error(\"[Jordan AI] No assistant message found\");\n            throw new Error(\"No Jordan AI message returned\");\n        }\n        fullMessage = assistantMessage.content.filter((c)=>c.type === \"text\").map((c)=>c.text.value).join(\"\");\n        console.log(\"[Jordan AI] Message retrieved:\", fullMessage);\n    } catch (error) {\n        console.error(\"[Jordan AI] Failed to generate Jordan response:\", error);\n        // Stop typing indicator on error\n        await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.USER_TYPING, {\n            userId: jordanUserId,\n            isTyping: false\n        });\n        throw error;\n    }\n    // Stop typing indicator\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.USER_TYPING, {\n        userId: jordanUserId,\n        isTyping: false\n    });\n    // Process message (no longer need to parse STATE_UPDATE_JSON)\n    console.log(\"[Jordan AI] Processing message...\");\n    const cleanedMessage = fullMessage.trim();\n    // Only store message if we have actual content\n    if (!cleanedMessage || cleanedMessage.length === 0) {\n        console.error(\"[Jordan AI] No content in Jordan response, skipping storage\");\n        throw new Error(\"Jordan AI returned empty response\");\n    }\n    // Store message in database as Jordan's response\n    console.log(\"[Jordan AI] Storing Jordan message in database...\");\n    const newMessage = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.event.create({\n        data: {\n            chat_id: chatId,\n            type: \"message\",\n            data: {\n                content: cleanedMessage,\n                senderId: jordanUserId\n            }\n        }\n    });\n    // Emit new message event\n    await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.NEW_MESSAGE, {\n        id: newMessage.id,\n        created_at: newMessage.created_at.toISOString(),\n        data: {\n            content: cleanedMessage,\n            senderId: jordanUserId\n        }\n    });\n    // Use role-based turn management\n    console.log(\"[Jordan AI] Jordan responded, setting turn to mediator...\");\n    await turnManager.setTurnToRole(_features_chat_services_turnManager__WEBPACK_IMPORTED_MODULE_3__.DEMO_ROLES.MEDIATOR);\n    // Trigger mediator response after Jordan responds\n    console.log(\"[Jordan AI] Triggering mediator response after Jordan...\");\n    const { generateAIReply } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./generateAIReply */ \"(rsc)/./features/ai/services/generateAIReply.ts\"));\n    // The mediator is responding to Jordan's message, so pass Jordan's message and Jordan's ID\n    generateAIReply({\n        chatId,\n        userId: jordanUserId,\n        userMessage: cleanedMessage // Jordan's message that the mediator is responding to\n    }).catch((error)=>{\n        console.error(\"[Jordan AI] Failed to generate mediator response after Jordan:\", error);\n    });\n    console.log(\"[Jordan AI] Jordan reply generation complete\");\n    return {\n        content: cleanedMessage\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./features/ai/services/generateJordanReply.ts\n");

/***/ }),

/***/ "(rsc)/./features/chat/services/turnManager.ts":
/*!***********************************************!*\
  !*** ./features/chat/services/turnManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TURN_ORDER: () => (/* binding */ DEFAULT_TURN_ORDER),\n/* harmony export */   DEMO_ROLES: () => (/* binding */ DEMO_ROLES),\n/* harmony export */   DemoRoleResolver: () => (/* binding */ DemoRoleResolver),\n/* harmony export */   TurnEventEmitter: () => (/* binding */ TurnEventEmitter),\n/* harmony export */   TurnManager: () => (/* binding */ TurnManager),\n/* harmony export */   TurnStateManager: () => (/* binding */ TurnStateManager),\n/* harmony export */   createCustomTurnManager: () => (/* binding */ createCustomTurnManager),\n/* harmony export */   createDemoTurnManager: () => (/* binding */ createDemoTurnManager)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n/* harmony import */ var _lib_pusher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/pusher */ \"(rsc)/./lib/pusher.ts\");\n\n\n// Define the roles in the demo chat\nconst DEMO_ROLES = {\n    USER_A: \"user_a\",\n    JORDAN: \"jordan\",\n    MEDIATOR: \"mediator\"\n};\n// Default turn order for demo chats\nconst DEFAULT_TURN_ORDER = [\n    DEMO_ROLES.USER_A,\n    DEMO_ROLES.MEDIATOR,\n    DEMO_ROLES.JORDAN,\n    DEMO_ROLES.MEDIATOR\n];\n// Demo-specific role resolver\nclass DemoRoleResolver {\n    async getUserIdForRole(chatId, role) {\n        if (role === DEMO_ROLES.MEDIATOR) {\n            return \"assistant\"; // Special case for mediator\n        }\n        const chat = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chat.findUnique({\n            where: {\n                id: chatId\n            },\n            include: {\n                participants: {\n                    include: {\n                        user: true\n                    }\n                }\n            }\n        });\n        if (!chat) return null;\n        // For demo chats, identify User A by display name, Jordan by display name\n        if (role === DEMO_ROLES.USER_A) {\n            const userA = chat.participants.find((p)=>p.user.display_name === \"User A\");\n            return userA?.user_id || null;\n        } else if (role === DEMO_ROLES.JORDAN) {\n            const jordan = chat.participants.find((p)=>p.user.display_name === \"Jordan\");\n            return jordan?.user_id || null;\n        }\n        return null;\n    }\n    async getRoleForUserId(chatId, userId) {\n        if (userId === \"assistant\") {\n            return DEMO_ROLES.MEDIATOR;\n        }\n        const chat = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chat.findUnique({\n            where: {\n                id: chatId\n            },\n            include: {\n                participants: {\n                    include: {\n                        user: true\n                    }\n                }\n            }\n        });\n        if (!chat) return null;\n        // For demo chats, identify User A vs Jordan by display name\n        const participant = chat.participants.find((p)=>p.user_id === userId);\n        if (!participant) return null;\n        if (participant.user.display_name === \"User A\") {\n            return DEMO_ROLES.USER_A;\n        } else if (participant.user.display_name === \"Jordan\") {\n            return DEMO_ROLES.JORDAN;\n        }\n        return null;\n    }\n}\n// Turn state manager - handles database operations\nclass TurnStateManager {\n    constructor(chatId){\n        this.chatId = chatId;\n    }\n    async getCurrentTurn() {\n        const turnState = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chatTurnState.findUnique({\n            where: {\n                chat_id: this.chatId\n            }\n        });\n        if (!turnState) return null;\n        return {\n            next_role: turnState.next_role || DEMO_ROLES.USER_A,\n            next_user_id: turnState.next_user_id || undefined,\n            turn_queue: turnState.turn_queue || DEFAULT_TURN_ORDER,\n            current_turn_index: turnState.current_turn_index || 0\n        };\n    }\n    async updateTurnState(state) {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chatTurnState.update({\n            where: {\n                chat_id: this.chatId\n            },\n            data: {\n                next_role: state.next_role,\n                next_user_id: state.next_user_id,\n                current_turn_index: state.current_turn_index\n            }\n        });\n    }\n    async initializeTurnState(config, initialUserId) {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.chatTurnState.upsert({\n            where: {\n                chat_id: this.chatId\n            },\n            update: {\n                next_role: config.initialRole,\n                next_user_id: initialUserId,\n                turn_queue: config.turnOrder,\n                current_turn_index: config.initialIndex\n            },\n            create: {\n                chat_id: this.chatId,\n                next_role: config.initialRole,\n                next_user_id: initialUserId,\n                turn_queue: config.turnOrder,\n                current_turn_index: config.initialIndex\n            }\n        });\n    }\n}\n// Event emitter for real-time updates\nclass TurnEventEmitter {\n    constructor(chatId){\n        this.chatId = chatId;\n    }\n    async emitTurnUpdate(state) {\n        const channelName = (0,_lib_pusher__WEBPACK_IMPORTED_MODULE_1__.getChatChannelName)(this.chatId);\n        await _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherServer.trigger(channelName, _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.PUSHER_EVENTS.TURN_UPDATE, {\n            next_role: state.next_role,\n            next_user_id: state.next_user_id\n        });\n    }\n}\n// Main turn manager - orchestrates the components\nclass TurnManager {\n    constructor(chatId, roleResolver){\n        this.chatId = chatId;\n        this.stateManager = new TurnStateManager(chatId);\n        this.eventEmitter = new TurnEventEmitter(chatId);\n        this.roleResolver = roleResolver || new DemoRoleResolver();\n    }\n    // Initialize turn state for a demo chat\n    async initializeDemoTurns(userAId, jordanId) {\n        console.log(\"[TurnManager] Initializing demo turns\", {\n            chatId: this.chatId,\n            userAId,\n            jordanId\n        });\n        const config = {\n            turnOrder: DEFAULT_TURN_ORDER,\n            initialRole: DEMO_ROLES.USER_A,\n            initialIndex: 0\n        };\n        await this.stateManager.initializeTurnState(config, userAId);\n        const state = {\n            next_role: config.initialRole,\n            next_user_id: userAId,\n            turn_queue: config.turnOrder,\n            current_turn_index: config.initialIndex\n        };\n        await this.eventEmitter.emitTurnUpdate(state);\n    }\n    // Get current turn state\n    async getCurrentTurn() {\n        return this.stateManager.getCurrentTurn();\n    }\n    // Advance to the next turn\n    async advanceTurn() {\n        console.log(\"[TurnManager] Advancing turn for chat:\", this.chatId);\n        const currentState = await this.getCurrentTurn();\n        if (!currentState) {\n            throw new Error(\"No turn state found for chat\");\n        }\n        const nextIndex = (currentState.current_turn_index + 1) % currentState.turn_queue.length;\n        const nextRole = currentState.turn_queue[nextIndex];\n        const nextUserId = await this.roleResolver.getUserIdForRole(this.chatId, nextRole);\n        console.log(\"[TurnManager] Next turn:\", {\n            nextRole,\n            nextUserId,\n            nextIndex\n        });\n        const newState = {\n            next_role: nextRole,\n            next_user_id: nextUserId || undefined,\n            turn_queue: currentState.turn_queue,\n            current_turn_index: nextIndex\n        };\n        await this.stateManager.updateTurnState(newState);\n        await this.eventEmitter.emitTurnUpdate(newState);\n        return newState;\n    }\n    // Set turn to a specific role (for mediator responses)\n    async setTurnToRole(role) {\n        console.log(\"[TurnManager] Setting turn to role:\", {\n            chatId: this.chatId,\n            role\n        });\n        const currentState = await this.getCurrentTurn();\n        if (!currentState) {\n            throw new Error(\"No turn state found for chat\");\n        }\n        // Find the index of the role in the queue\n        const roleIndex = currentState.turn_queue.indexOf(role);\n        if (roleIndex === -1) {\n            throw new Error(`Role ${role} not found in turn queue`);\n        }\n        const userId = await this.roleResolver.getUserIdForRole(this.chatId, role);\n        const newState = {\n            next_role: role,\n            next_user_id: userId || undefined,\n            turn_queue: currentState.turn_queue,\n            current_turn_index: roleIndex\n        };\n        await this.stateManager.updateTurnState(newState);\n        await this.eventEmitter.emitTurnUpdate(newState);\n        return newState;\n    }\n    // Check if a user can send a message based on their role\n    async canUserSendMessage(userId) {\n        const currentState = await this.getCurrentTurn();\n        if (!currentState) return false;\n        // Check if it's their turn by user ID (backward compatibility)\n        if (currentState.next_user_id === userId) {\n            return true;\n        }\n        // Check if it's their turn by role\n        const userRole = await this.roleResolver.getRoleForUserId(this.chatId, userId);\n        return userRole === currentState.next_role;\n    }\n    // Get role for a user ID\n    async getRoleForUserId(userId) {\n        return this.roleResolver.getRoleForUserId(this.chatId, userId);\n    }\n    // Get user ID for a role\n    async getUserIdForRole(role) {\n        return this.roleResolver.getUserIdForRole(this.chatId, role);\n    }\n}\n// Factory functions for different chat types\nfunction createDemoTurnManager(chatId) {\n    return new TurnManager(chatId, new DemoRoleResolver());\n}\nfunction createCustomTurnManager(chatId, roleResolver, config) {\n    return new TurnManager(chatId, roleResolver);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./features/chat/services/turnManager.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/.pnpm/next-auth@4.24.11_@auth+core@0.39.1_next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_r_gev7rdmj5zqi6quqd4i72ffmfu/node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _app_api_nextauth_route__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/app/api/[...nextauth]/route */ \"(rsc)/./app/api/[...nextauth]/route.ts\");\n// GPT CONTEXT:\n// This file provides a helper for retrieving the current authenticated session using NextAuth.\n// Related modules: /app/api/messages/route.ts, /lib/prisma.ts\n// Do NOT modify NextAuth config directly here.\n\n\nasync function auth() {\n    return await (0,next_auth__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(_app_api_nextauth_route__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsZUFBZTtBQUNmLCtGQUErRjtBQUMvRiw4REFBOEQ7QUFDOUQsK0NBQStDO0FBRUY7QUFDZTtBQUVyRCxlQUFlRTtJQUNwQixPQUFPLE1BQU1GLDJEQUFnQkEsQ0FBQ0MsZ0VBQVdBO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va29tZW5zYS12NS8uL2xpYi9hdXRoLnRzP2JmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR1BUIENPTlRFWFQ6XG4vLyBUaGlzIGZpbGUgcHJvdmlkZXMgYSBoZWxwZXIgZm9yIHJldHJpZXZpbmcgdGhlIGN1cnJlbnQgYXV0aGVudGljYXRlZCBzZXNzaW9uIHVzaW5nIE5leHRBdXRoLlxuLy8gUmVsYXRlZCBtb2R1bGVzOiAvYXBwL2FwaS9tZXNzYWdlcy9yb3V0ZS50cywgL2xpYi9wcmlzbWEudHNcbi8vIERvIE5PVCBtb2RpZnkgTmV4dEF1dGggY29uZmlnIGRpcmVjdGx5IGhlcmUuXG5cbmltcG9ydCB7IGdldFNlcnZlclNlc3Npb24gfSBmcm9tICduZXh0LWF1dGgnO1xuaW1wb3J0IHsgYXV0aE9wdGlvbnMgfSBmcm9tICdAL2FwcC9hcGkvWy4uLm5leHRhdXRoXS9yb3V0ZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdXRoKCkge1xuICByZXR1cm4gYXdhaXQgZ2V0U2VydmVyU2Vzc2lvbihhdXRoT3B0aW9ucyk7XG59XG4iXSwibmFtZXMiOlsiZ2V0U2VydmVyU2Vzc2lvbiIsImF1dGhPcHRpb25zIiwiYXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/openai.ts":
/*!***********************!*\
  !*** ./lib/openai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   openai: () => (/* binding */ openai),\n/* harmony export */   runWithRetries: () => (/* binding */ runWithRetries)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@4.102.0_zod@3.25.20/node_modules/openai/index.mjs\");\n\nif (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"Missing OPENAI_API_KEY environment variable\");\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function runWithRetries(fn, maxRetries = 3) {\n    let lastError;\n    for(let i = 0; i < maxRetries; i++){\n        try {\n            return await fn();\n        } catch (error) {\n            lastError = error;\n            if (error instanceof Error && error.message.includes(\"429\")) {\n                await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, i) * 1000));\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw lastError;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvb3BlbmFpLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUU1QixJQUFJLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxFQUFFO0lBQy9CLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVPLE1BQU1DLFNBQVMsSUFBSUwsOENBQU1BLENBQUM7SUFDL0JNLFFBQVFMLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUNwQyxHQUFHO0FBRUksZUFBZUksZUFDcEJDLEVBQW9CLEVBQ3BCQyxhQUFhLENBQUM7SUFFZCxJQUFJQztJQUNKLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixZQUFZRSxJQUFLO1FBQ25DLElBQUk7WUFDRixPQUFPLE1BQU1IO1FBQ2YsRUFBRSxPQUFPSSxPQUFPO1lBQ2RGLFlBQVlFO1lBQ1osSUFBSUEsaUJBQWlCUixTQUFTUSxNQUFNQyxPQUFPLENBQUNDLFFBQVEsQ0FBQyxRQUFRO2dCQUMzRCxNQUFNLElBQUlDLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVNFLEtBQUtDLEdBQUcsQ0FBQyxHQUFHUixLQUFLO2dCQUNsRTtZQUNGO1lBQ0EsTUFBTUM7UUFDUjtJQUNGO0lBQ0EsTUFBTUY7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2tvbWVuc2EtdjUvLi9saWIvb3BlbmFpLnRzPzAwZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuXG5pZiAoIXByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZKSB7XG4gIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZScpO1xufVxuXG5leHBvcnQgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVksXG59KTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bldpdGhSZXRyaWVzPFQ+KFxuICBmbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgbWF4UmV0cmllcyA9IDNcbik6IFByb21pc2U8VD4ge1xuICBsZXQgbGFzdEVycm9yOiBFcnJvcjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhSZXRyaWVzOyBpKyspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxhc3RFcnJvciA9IGVycm9yIGFzIEVycm9yO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnNDI5JykpIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE1hdGgucG93KDIsIGkpICogMTAwMCkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICB0aHJvdyBsYXN0RXJyb3IhO1xufVxuIl0sIm5hbWVzIjpbIk9wZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOQUlfQVBJX0tFWSIsIkVycm9yIiwib3BlbmFpIiwiYXBpS2V5IiwicnVuV2l0aFJldHJpZXMiLCJmbiIsIm1heFJldHJpZXMiLCJsYXN0RXJyb3IiLCJpIiwiZXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJNYXRoIiwicG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// GPT CONTEXT:\n// This file exports a Prisma client configured for use with the Neon database in a Vercel Edge-compatible way.\n// Related modules: /app/api/messages/route.ts, /prisma/schema.prisma\n// Do NOT modify this file once it is stable.\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGVBQWU7QUFDZiwrR0FBK0c7QUFDL0cscUVBQXFFO0FBQ3JFLDZDQUE2QztBQUVBO0FBRXRDLE1BQU1DLFNBQVMsSUFBSUQsd0RBQVlBLEdBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rb21lbnNhLXY1Ly4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdQVCBDT05URVhUOlxuLy8gVGhpcyBmaWxlIGV4cG9ydHMgYSBQcmlzbWEgY2xpZW50IGNvbmZpZ3VyZWQgZm9yIHVzZSB3aXRoIHRoZSBOZW9uIGRhdGFiYXNlIGluIGEgVmVyY2VsIEVkZ2UtY29tcGF0aWJsZSB3YXkuXG4vLyBSZWxhdGVkIG1vZHVsZXM6IC9hcHAvYXBpL21lc3NhZ2VzL3JvdXRlLnRzLCAvcHJpc21hL3NjaGVtYS5wcmlzbWFcbi8vIERvIE5PVCBtb2RpZnkgdGhpcyBmaWxlIG9uY2UgaXQgaXMgc3RhYmxlLlxuXG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCdcblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKVxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInByaXNtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./lib/pusher.ts":
/*!***********************!*\
  !*** ./lib/pusher.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PUSHER_EVENTS: () => (/* binding */ PUSHER_EVENTS),\n/* harmony export */   getChatChannelName: () => (/* binding */ getChatChannelName),\n/* harmony export */   pusherClient: () => (/* binding */ pusherClient),\n/* harmony export */   pusherServer: () => (/* binding */ pusherServer)\n/* harmony export */ });\n/* harmony import */ var pusher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pusher */ \"(rsc)/./node_modules/.pnpm/pusher@5.2.0/node_modules/pusher/lib/pusher.js\");\n/* harmony import */ var pusher__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pusher__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var pusher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pusher-js */ \"(rsc)/./node_modules/.pnpm/pusher-js@8.4.0/node_modules/pusher-js/dist/node/pusher.js\");\n/* harmony import */ var pusher_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pusher_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Server-side Pusher instance\nconst pusherServer = new (pusher__WEBPACK_IMPORTED_MODULE_0___default())({\n    appId: process.env.PUSHER_APP_ID,\n    key: process.env.PUSHER_KEY,\n    secret: process.env.PUSHER_SECRET,\n    cluster: process.env.PUSHER_CLUSTER,\n    useTLS: true\n});\n// Client-side Pusher instance\nconst pusherClient = new (pusher_js__WEBPACK_IMPORTED_MODULE_1___default())(\"4013bd94180477c7f399\", {\n    cluster: \"us3\"\n});\n// Helper function to get channel name for a chat\nconst getChatChannelName = (chatId)=>`chat-${chatId}`;\n// Event types\nconst PUSHER_EVENTS = {\n    ASSISTANT_TYPING: \"assistant-typing\",\n    ASSISTANT_TOKEN: \"assistant-token\",\n    USER_TYPING: \"user-typing\",\n    NEW_MESSAGE: \"new-message\",\n    TURN_UPDATE: \"turn-update\",\n    STATE_UPDATE: \"state-update\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcHVzaGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ1M7QUFFckMsOEJBQThCO0FBQ3ZCLE1BQU1FLGVBQWUsSUFBSUYsK0NBQU1BLENBQUM7SUFDckNHLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0MsYUFBYTtJQUNoQ0MsS0FBS0gsUUFBUUMsR0FBRyxDQUFDRyxVQUFVO0lBQzNCQyxRQUFRTCxRQUFRQyxHQUFHLENBQUNLLGFBQWE7SUFDakNDLFNBQVNQLFFBQVFDLEdBQUcsQ0FBQ08sY0FBYztJQUNuQ0MsUUFBUTtBQUNWLEdBQUc7QUFFSCw4QkFBOEI7QUFDdkIsTUFBTUMsZUFBZSxJQUFJYixrREFBWUEsQ0FBQ0csc0JBQWtDLEVBQUc7SUFDaEZPLFNBQVNQLEtBQXNDO0FBQ2pELEdBQUc7QUFFSCxpREFBaUQ7QUFDMUMsTUFBTWEscUJBQXFCLENBQUNDLFNBQW1CLENBQUMsS0FBSyxFQUFFQSxPQUFPLENBQUMsQ0FBQztBQUV2RSxjQUFjO0FBQ1AsTUFBTUMsZ0JBQWdCO0lBQzNCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsY0FBYztBQUNoQixFQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va29tZW5zYS12NS8uL2xpYi9wdXNoZXIudHM/OTAzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHVzaGVyIGZyb20gJ3B1c2hlcic7XG5pbXBvcnQgUHVzaGVyQ2xpZW50IGZyb20gJ3B1c2hlci1qcyc7XG5cbi8vIFNlcnZlci1zaWRlIFB1c2hlciBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHB1c2hlclNlcnZlciA9IG5ldyBQdXNoZXIoe1xuICBhcHBJZDogcHJvY2Vzcy5lbnYuUFVTSEVSX0FQUF9JRCEsXG4gIGtleTogcHJvY2Vzcy5lbnYuUFVTSEVSX0tFWSEsXG4gIHNlY3JldDogcHJvY2Vzcy5lbnYuUFVTSEVSX1NFQ1JFVCEsXG4gIGNsdXN0ZXI6IHByb2Nlc3MuZW52LlBVU0hFUl9DTFVTVEVSISxcbiAgdXNlVExTOiB0cnVlLFxufSk7XG5cbi8vIENsaWVudC1zaWRlIFB1c2hlciBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHB1c2hlckNsaWVudCA9IG5ldyBQdXNoZXJDbGllbnQocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfUFVTSEVSX0tFWSEsIHtcbiAgY2x1c3RlcjogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfUFVTSEVSX0NMVVNURVIhLFxufSk7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgY2hhbm5lbCBuYW1lIGZvciBhIGNoYXRcbmV4cG9ydCBjb25zdCBnZXRDaGF0Q2hhbm5lbE5hbWUgPSAoY2hhdElkOiBzdHJpbmcpID0+IGBjaGF0LSR7Y2hhdElkfWA7XG5cbi8vIEV2ZW50IHR5cGVzXG5leHBvcnQgY29uc3QgUFVTSEVSX0VWRU5UUyA9IHtcbiAgQVNTSVNUQU5UX1RZUElORzogJ2Fzc2lzdGFudC10eXBpbmcnLFxuICBBU1NJU1RBTlRfVE9LRU46ICdhc3Npc3RhbnQtdG9rZW4nLCBcbiAgVVNFUl9UWVBJTkc6ICd1c2VyLXR5cGluZycsXG4gIE5FV19NRVNTQUdFOiAnbmV3LW1lc3NhZ2UnLFxuICBUVVJOX1VQREFURTogJ3R1cm4tdXBkYXRlJyxcbiAgU1RBVEVfVVBEQVRFOiAnc3RhdGUtdXBkYXRlJyxcbn0gYXMgY29uc3Q7ICJdLCJuYW1lcyI6WyJQdXNoZXIiLCJQdXNoZXJDbGllbnQiLCJwdXNoZXJTZXJ2ZXIiLCJhcHBJZCIsInByb2Nlc3MiLCJlbnYiLCJQVVNIRVJfQVBQX0lEIiwia2V5IiwiUFVTSEVSX0tFWSIsInNlY3JldCIsIlBVU0hFUl9TRUNSRVQiLCJjbHVzdGVyIiwiUFVTSEVSX0NMVVNURVIiLCJ1c2VUTFMiLCJwdXNoZXJDbGllbnQiLCJORVhUX1BVQkxJQ19QVVNIRVJfS0VZIiwiTkVYVF9QVUJMSUNfUFVTSEVSX0NMVVNURVIiLCJnZXRDaGF0Q2hhbm5lbE5hbWUiLCJjaGF0SWQiLCJQVVNIRVJfRVZFTlRTIiwiQVNTSVNUQU5UX1RZUElORyIsIkFTU0lTVEFOVF9UT0tFTiIsIlVTRVJfVFlQSU5HIiwiTkVXX01FU1NBR0UiLCJUVVJOX1VQREFURSIsIlNUQVRFX1VQREFURSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/pusher.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0","vendor-chunks/next-auth@4.24.11_@auth+core@0.39.1_next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_r_gev7rdmj5zqi6quqd4i72ffmfu","vendor-chunks/@opentelemetry+api@1.9.0","vendor-chunks/@babel+runtime@7.27.1","vendor-chunks/pusher-js@8.4.0","vendor-chunks/tr46@0.0.3","vendor-chunks/jose@4.15.9","vendor-chunks/tweetnacl@1.0.3","vendor-chunks/openid-client@5.7.1","vendor-chunks/node-fetch@2.7.0","vendor-chunks/whatwg-url@5.0.0","vendor-chunks/pusher@5.2.0","vendor-chunks/event-target-shim@5.0.1","vendor-chunks/oauth@0.9.15","vendor-chunks/object-hash@2.2.0","vendor-chunks/preact@10.24.3","vendor-chunks/webidl-conversions@3.0.1","vendor-chunks/uuid@8.3.2","vendor-chunks/yallist@4.0.0","vendor-chunks/preact-render-to-string@5.2.6_preact@10.24.3","vendor-chunks/lru-cache@6.0.0","vendor-chunks/cookie@0.7.2","vendor-chunks/abort-controller@3.0.0","vendor-chunks/tweetnacl-util@0.15.1","vendor-chunks/oidc-token-hash@5.1.0","vendor-chunks/@panva+hkdf@1.2.1","vendor-chunks/is-base64@1.1.0","vendor-chunks/formdata-node@4.4.1","vendor-chunks/@auth+prisma-adapter@2.9.1_@prisma+client@6.8.2_prisma@6.8.2_typescript@5.8.3__typescript@5.8.3_","vendor-chunks/openai@4.102.0_zod@3.25.20","vendor-chunks/form-data-encoder@1.7.2","vendor-chunks/agentkeepalive@4.6.0","vendor-chunks/web-streams-polyfill@4.0.0-beta.3","vendor-chunks/ms@2.1.3","vendor-chunks/humanize-ms@1.2.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.27.1_@opentelemetry+api@1.9.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmessages%2Froute&page=%2Fapi%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmessages%2Froute.ts&appDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmichael%2FDocuments%2FKomensa-5%2Fkomensa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();